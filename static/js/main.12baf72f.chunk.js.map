{"version":3,"sources":["components/header.js","components/initData.js","reducers/exchangeReducer.js","Store.js","components/exchange.js","components/history.js","App.js","serviceWorker.js","index.js","money.png"],"names":["Header","className","src","moneylogo","alt","initRatio","rates","CAD","HKD","ISK","PHP","DKK","HUF","CZK","GBP","RON","SEK","IDR","INR","BRL","RUB","HRK","JPY","THB","CHF","EUR","MYR","BGN","TRY","CNY","NOK","NZD","ZAR","USD","MXN","SGD","AUD","ILS","KRW","PLN","base","date","initCurrency","inputCurrency","inputCount","outputCurrency","outputCount","convertRatio","exchangeReducer","state","action","newCurrency","type","temp","toPrecision","eventValue","configureStore","reducer","Exchange","useState","isLoaded","setIsloaded","ratio","setRatio","currency","setCurrency","displayOptions","selectable_options","key","push","value","useEffect","fetch","then","res","json","id","onChange","e","target","onClick","History","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.12baf72f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moneylogo from \"../money.png\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"App-header\">\r\n      <img src={moneylogo} className=\"App-logo\" alt=\"logo\" />\r\n      <h5>Choose the currency and the amounts to get the exchange rate</h5>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export const initRatio = {\r\n  rates: {\r\n    CAD: 1.3184315051,\r\n    HKD: 7.7501056368,\r\n    ISK: 135.8911518634,\r\n    PHP: 48.4289698301,\r\n    DKK: 6.2877545846,\r\n    HUF: 304.8930955802,\r\n    CZK: 22.5868334319,\r\n    GBP: 0.7717231471,\r\n    RON: 4.1054677597,\r\n    SEK: 8.788134877,\r\n    IDR: 14735.003802924,\r\n    INR: 73.5350291558,\r\n    BRL: 5.2544578721,\r\n    RUB: 75.334995352,\r\n    HRK: 6.3732781205,\r\n    JPY: 104.3606862165,\r\n    THB: 31.1746809769,\r\n    CHF: 0.9106735401,\r\n    EUR: 0.845094228,\r\n    MYR: 4.1145102679,\r\n    BGN: 1.6528352911,\r\n    TRY: 7.5720442829,\r\n    CNY: 6.7730921998,\r\n    NOK: 9.0879743091,\r\n    NZD: 1.4779852954,\r\n    ZAR: 16.1852446548,\r\n    USD: 1,\r\n    MXN: 20.9028986732,\r\n    SGD: 1.3590805375,\r\n    AUD: 1.3726020451,\r\n    ILS: 3.4235612271,\r\n    KRW: 1162.8158539677,\r\n    PLN: 3.7692892758,\r\n  },\r\n  base: \"USD\",\r\n  date: \"2020-09-18\",\r\n};\r\n\r\nexport const initCurrency = {\r\n  inputCurrency: \"USD\",\r\n  inputCount: 1,\r\n  outputCurrency: \"CAD\",\r\n  outputCount: 1.3184315051,\r\n  convertRatio: 1.3184315051,\r\n};\r\n","import { initRatio, initCurrency } from \"../components/initData\";\r\n\r\nfunction exchangeReducer(state = initCurrency, action) {\r\n  const newCurrency = { ...state, rates: { ...state.rates } };\r\n  switch (action.type) {\r\n    case \"updateSwap\":\r\n      let temp = newCurrency.inputCurrency;\r\n      newCurrency.inputCurrency = newCurrency.outputCurrency;\r\n      newCurrency.outputCurrency = temp;\r\n      newCurrency.convertRatio = (\r\n        initRatio.rates[newCurrency.outputCurrency] /\r\n        initRatio.rates[newCurrency.inputCurrency]\r\n      ).toPrecision(10);\r\n      newCurrency.outputCount =\r\n        newCurrency.inputCount * newCurrency.convertRatio;\r\n      return newCurrency;\r\n    case \"updateInputCount\":\r\n      newCurrency.inputCount = action.eventValue;\r\n      newCurrency.outputCount =\r\n        newCurrency.inputCount * newCurrency.convertRatio;\r\n      return newCurrency;\r\n    case \"updateInputCurrency\":\r\n      newCurrency.inputCurrency = action.eventValue;\r\n      newCurrency.convertRatio = (\r\n        initRatio.rates[newCurrency.outputCurrency] /\r\n        initRatio.rates[newCurrency.inputCurrency]\r\n      ).toPrecision(10);\r\n      newCurrency.outputCount =\r\n        newCurrency.inputCount * newCurrency.convertRatio;\r\n      return newCurrency;\r\n    case \"updateOutputCount\":\r\n      newCurrency.outputCount = action.eventValue;\r\n      newCurrency.inputCount = (\r\n        newCurrency.outputCount / newCurrency.convertRatio\r\n      ).toPrecision(10);\r\n      return newCurrency;\r\n\r\n    case \"updateOutputCurrency\":\r\n      newCurrency.outputCurrency = action.eventValue;\r\n      newCurrency.convertRatio = (\r\n        initRatio.rates[newCurrency.outputCurrency] /\r\n        initRatio.rates[newCurrency.inputCurrency]\r\n      ).toPrecision(10);\r\n      newCurrency.inputCount = (\r\n        newCurrency.outputCount / newCurrency.convertRatio\r\n      ).toPrecision(10);\r\n      return newCurrency;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default exchangeReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport exchangeReducer from \"./reducers/exchangeReducer\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    exchangeReducer,\r\n  },\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport store from \"../Store\";\r\nimport { initRatio, initCurrency } from \"./initData\";\r\nimport { swap } from \"../actions/updates\";\r\n\r\nfunction Exchange() {\r\n  const [isLoaded, setIsloaded] = useState(false);\r\n  const [ratio, setRatio] = useState(initRatio);\r\n  const [currency, setCurrency] = useState(initCurrency);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.exchangeratesapi.io/latest?base=USD\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setRatio(res);\r\n        setIsloaded(true);\r\n        const newCurrency = { ...currency };\r\n        newCurrency.convertRatio = res.rates[\"CAD\"];\r\n        setCurrency(newCurrency);\r\n      });\r\n  }, []);\r\n\r\n  function displayOptions(isLoaded, ratio) {\r\n    let selectable_options = [];\r\n    if (isLoaded) {\r\n      for (let key in ratio.rates) {\r\n        selectable_options.push(\r\n          <option value={key} key={key}>\r\n            {key}\r\n          </option>\r\n        );\r\n      }\r\n    }\r\n    return selectable_options;\r\n  }\r\n\r\n  const updateInputCount = (e) => {\r\n    const newCurrency = { ...currency };\r\n    newCurrency.inputCount = e.target.value;\r\n    newCurrency.outputCount = newCurrency.inputCount * newCurrency.convertRatio;\r\n    setCurrency(newCurrency);\r\n    // store.dispatch(inputCount(e.target.value));\r\n    // console.log(store.getState());\r\n  };\r\n\r\n  const updateInputCurrency = (e) => {\r\n    const newCurrency = { ...currency };\r\n    newCurrency.inputCurrency = e.target.value;\r\n    newCurrency.convertRatio = (\r\n      ratio.rates[newCurrency.outputCurrency] /\r\n      ratio.rates[newCurrency.inputCurrency]\r\n    ).toPrecision(10);\r\n    newCurrency.outputCount = newCurrency.inputCount * newCurrency.convertRatio;\r\n    setCurrency(newCurrency);\r\n    // store.dispatch(inputCurrency(e.target.value));\r\n    // console.log(store.getState());\r\n  };\r\n\r\n  const updateOutputCount = (e) => {\r\n    const newCurrency = { ...currency };\r\n    newCurrency.outputCount = e.target.value;\r\n    newCurrency.inputCount = (\r\n      newCurrency.outputCount / newCurrency.convertRatio\r\n    ).toPrecision(10);\r\n    setCurrency(newCurrency);\r\n    // store.dispatch(updateOutputCount(e.target.value));\r\n    // console.log(store.getState());\r\n  };\r\n\r\n  const updateOutputCurrency = (e) => {\r\n    const newCurrency = { ...currency };\r\n    newCurrency.outputCurrency = e.target.value;\r\n    newCurrency.convertRatio = (\r\n      ratio.rates[newCurrency.outputCurrency] /\r\n      ratio.rates[newCurrency.inputCurrency]\r\n    ).toPrecision(10);\r\n    newCurrency.inputCount = (\r\n      newCurrency.outputCount / newCurrency.convertRatio\r\n    ).toPrecision(10);\r\n    setCurrency(newCurrency);\r\n    // store.dispatch(outputCurrency(e.target.value));\r\n    // console.log(store.getState());\r\n  };\r\n\r\n  const updateSwap = () => {\r\n    const newCurrency = { ...currency };\r\n    let temp = newCurrency.inputCurrency;\r\n    newCurrency.inputCurrency = newCurrency.outputCurrency;\r\n    newCurrency.outputCurrency = temp;\r\n    newCurrency.convertRatio = (\r\n      ratio.rates[newCurrency.outputCurrency] /\r\n      ratio.rates[newCurrency.inputCurrency]\r\n    ).toPrecision(10);\r\n    newCurrency.outputCount = newCurrency.inputCount * newCurrency.convertRatio;\r\n    setCurrency(newCurrency);\r\n    // store.dispatch(swap());\r\n    // console.log(store.getState());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"form-inline justify-content-center\">\r\n          <select\r\n            className=\"form-control col-sm-2\"\r\n            id=\"input-currency\"\r\n            value={isLoaded ? currency.inputCurrency : \"USD\"}\r\n            onChange={updateInputCurrency}\r\n          >\r\n            {displayOptions(isLoaded, ratio)}\r\n          </select>\r\n          <div className=\"form-control col-sm-3\">\r\n            <input\r\n              className=\"col\"\r\n              type=\"number\"\r\n              value={isLoaded ? currency.inputCount : 1}\r\n              id=\"input-currency-count\"\r\n              onChange={updateInputCount}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"form-inline justify-content-center mb-3\">\r\n          <button className=\"btn col-sm-2 btn-success\" onClick={updateSwap}>\r\n            Swap\r\n          </button>\r\n        </div>\r\n        <div className=\"form-inline justify-content-center\">\r\n          {isLoaded ? (\r\n            <p className=\"display\">\r\n              1 {currency.inputCurrency} = {currency.convertRatio}{\" \"}\r\n              {currency.outputCurrency}\r\n            </p>\r\n          ) : (\r\n            <p className=\"display\">Loading...</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"form-inline justify-content-center\">\r\n          <select\r\n            className=\"form-control col-sm-2\"\r\n            id=\"output-currency\"\r\n            onChange={updateOutputCurrency}\r\n            value={isLoaded ? currency.outputCurrency : \"CAD\"}\r\n          >\r\n            {displayOptions(isLoaded, ratio)}\r\n          </select>\r\n          <div className=\"form-control col-sm-3 numdisplay\">\r\n            <input\r\n              className=\"col\"\r\n              type=\"number\"\r\n              value={isLoaded ? currency.outputCount : 1}\r\n              onChange={updateOutputCount}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"form-inline justify-content-center mb-3\">\r\n          <button className=\"btn col-sm-2 btn-success\">Save</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Exchange;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction History() {\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <hr></hr>\r\n        <p className=\"display\">History:</p>\r\n        <div className=\"justify-content-center\">\r\n          <button className=\"btn history\">\r\n            <span>1 EGP = 0.063634 USD</span>\r\n          </button>\r\n          <button className=\"btn history\">\r\n            <span>1 EGP = 0.063634 USD</span>\r\n          </button>\r\n          <button className=\"btn history\">\r\n            <span>1 EGP = 0.063634 USD</span>\r\n          </button>\r\n          <button className=\"btn history\">\r\n            <span>1 EGP = 0.063634 USD</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"form-inline justify-content-center mb-3\">\r\n          <button className=\"btn col-sm-2 btn-success\">Clear</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default History;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/header\";\r\nimport Exchange from \"./components/exchange\";\r\nimport History from \"./components/history\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Exchange />\r\n      <History />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./Store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/money.8ebfab8f.png\";"],"sourceRoot":""}